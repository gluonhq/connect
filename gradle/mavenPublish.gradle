apply plugin: 'maven-publish'
apply plugin: 'signing'

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier.set('sources')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    archiveClassifier.set('javadoc')
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'Gluon Connect'
                description = "Gluon Connect"
                url = 'https://gluonhq.com/products/mobile/connect/'

                developers {
                    developer {
                        name = 'Joeri Sykora'
                        email = 'joeri.sykora@gluonhq.com'
                        organization = 'Gluon'
                        organizationUrl = 'https://gluonhq.com'
                    }
                }

                licenses {
                    license {
                        name = 'The 3-Clause BSD License'
                        url = 'http://www.opensource.org/licenses/bsd-license.php'
                        distribution = 'repo'
                    }
                }

                scm {
                    connection = 'scm:git:https://github.com/gluonhq/connect.git'
                    developerConnection = 'scm:git:ssh://git@github.com/gluonhq/connect.git'
                    url = 'https://github.com/gluonhq/connect'
                }
            }

            pom.withXml {
                Node pomNode = asNode()
                pomNode.dependencies.'*'.findAll() {
                    it.groupId.text() == 'org.openjfx'
                }.each {
                    it.parent().remove(it)
                }
            }
        }
    }

    repositories {
        maven {
            // to upload release, use:
            // ./gradlew -PrepositoryUrl=https://oss.sonatype.org/service/local/staging/deploy/maven2 publish
            url = getStringProperty('repositoryUrl', 'https://oss.sonatype.org/content/repositories/snapshots/')
            credentials {
                username = getStringPropertyDefaultAsProperty('repositoryUsername', 'sonatypeUsername')
                password = getStringPropertyDefaultAsProperty('repositoryPassword', 'sonatypePassword')
            }
        }
    }
}

signing {
    sign publishing.publications.maven
    required = { gradle.taskGraph.hasTask(publish) && !version.endsWith("SNAPSHOT") }
}

private String getStringProperty(String name, String defaultValue) {
    if (!project.hasProperty(name)) {
        return defaultValue
    }

    def propertyValue = project.property(name)
    return propertyValue != null ? propertyValue.toString().trim() : defaultValue
}

private String getStringPropertyDefaultAsProperty(String name, String defaultProperty) {
    if (!project.hasProperty(name)) {
        return project.hasProperty(defaultProperty) ? project.property(defaultProperty) : System.getenv(name)
    }

    def propertyValue = project.property(name)
    if (propertyValue != null) {
        return propertyValue.toString().trim()
    } else {
        return project.hasProperty(defaultProperty) ? project.property(defaultProperty) : System.getenv(name)
    }
}
